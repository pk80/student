// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostPersonsHandlerFunc turns a function with the right signature into a post persons handler
type PostPersonsHandlerFunc func(PostPersonsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostPersonsHandlerFunc) Handle(params PostPersonsParams) middleware.Responder {
	return fn(params)
}

// PostPersonsHandler interface for that can handle valid post persons params
type PostPersonsHandler interface {
	Handle(PostPersonsParams) middleware.Responder
}

// NewPostPersons creates a new http.Handler for the post persons operation
func NewPostPersons(ctx *middleware.Context, handler PostPersonsHandler) *PostPersons {
	return &PostPersons{Context: ctx, Handler: handler}
}

/*PostPersons swagger:route POST /persons postPersons

Creates a person

Adds a new person to the person list.

*/
type PostPersons struct {
	Context *middleware.Context
	Handler PostPersonsHandler
}

func (o *PostPersons) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostPersonsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
