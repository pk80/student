// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetPersonsUsernameHandlerFunc turns a function with the right signature into a get persons username handler
type GetPersonsUsernameHandlerFunc func(GetPersonsUsernameParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPersonsUsernameHandlerFunc) Handle(params GetPersonsUsernameParams) middleware.Responder {
	return fn(params)
}

// GetPersonsUsernameHandler interface for that can handle valid get persons username params
type GetPersonsUsernameHandler interface {
	Handle(GetPersonsUsernameParams) middleware.Responder
}

// NewGetPersonsUsername creates a new http.Handler for the get persons username operation
func NewGetPersonsUsername(ctx *middleware.Context, handler GetPersonsUsernameHandler) *GetPersonsUsername {
	return &GetPersonsUsername{Context: ctx, Handler: handler}
}

/*GetPersonsUsername swagger:route GET /persons/{username} getPersonsUsername

Gets a person

Returns a single person for its username.

*/
type GetPersonsUsername struct {
	Context *middleware.Context
	Handler GetPersonsUsernameHandler
}

func (o *GetPersonsUsername) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetPersonsUsernameParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
