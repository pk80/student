// Code generated by go-swagger; DO NOT EDIT.

package bofa_chk

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"mime/multipart"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewBofaChkUpdateParams creates a new BofaChkUpdateParams object
// no default values defined in spec.
func NewBofaChkUpdateParams() BofaChkUpdateParams {

	return BofaChkUpdateParams{}
}

// BofaChkUpdateParams contains all the bound params for the bofa chk update operation
// typically these are obtained from a http.Request
//
// swagger:parameters bofaChkUpdate
type BofaChkUpdateParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: query
	*/
	LastID int64
	/*
	  Required: true
	  In: query
	*/
	Source string
	/*
	  Required: true
	  In: formData
	*/
	Upfile io.ReadCloser
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewBofaChkUpdateParams() beforehand.
func (o *BofaChkUpdateParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}

	qLastID, qhkLastID, _ := qs.GetOK("lastId")
	if err := o.bindLastID(qLastID, qhkLastID, route.Formats); err != nil {
		res = append(res, err)
	}

	qSource, qhkSource, _ := qs.GetOK("source")
	if err := o.bindSource(qSource, qhkSource, route.Formats); err != nil {
		res = append(res, err)
	}

	upfile, upfileHeader, err := r.FormFile("upfile")
	if err != nil {
		res = append(res, errors.New(400, "reading file %q failed: %v", "upfile", err))
	} else if err := o.bindUpfile(upfile, upfileHeader); err != nil {
		// Required: true
		res = append(res, err)
	} else {
		o.Upfile = &runtime.File{Data: upfile, Header: upfileHeader}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindLastID binds and validates parameter LastID from query.
func (o *BofaChkUpdateParams) bindLastID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("lastId", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("lastId", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("lastId", "query", "int64", raw)
	}
	o.LastID = value

	return nil
}

// bindSource binds and validates parameter Source from query.
func (o *BofaChkUpdateParams) bindSource(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("source", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("source", "query", raw); err != nil {
		return err
	}

	o.Source = raw

	return nil
}

// bindUpfile binds file parameter Upfile.
//
// The only supported validations on files are MinLength and MaxLength
func (o *BofaChkUpdateParams) bindUpfile(file multipart.File, header *multipart.FileHeader) error {
	return nil
}
